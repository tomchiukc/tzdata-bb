.TH TZFILE 5
.SH NAME
tzfile \- time zone information
.SH SYNOPSIS
.B
#include "tzfile.h"
.SH DESCRIPTION
The time zone information files used by
.IR tzset (3)
begin with the magic characters "TZif" to identify them as
time zone information files,
followed by a character identifying the version of the file's format
(as of 2013, either an ASCII NUL, or '2', or '3')
followed by fifteen bytes containing zeroes reserved for future use,
followed by six four-byte integer values
written in a standard byte order
(the high-order byte of the value is written first).
These values are,
in order:
.TP
.I tzh_ttisgmtcnt
The number of UT/local indicators stored in the file.
.TP
.I tzh_ttisstdcnt
The number of standard/wall indicators stored in the file.
.TP
.I tzh_leapcnt
The number of leap seconds for which data entries are stored in the file.
.TP
.I tzh_timecnt
The number of transition times for which data entries are stored
in the file.
.TP
.I tzh_typecnt
The number of local time types for which data entries are stored
in the file (must not be zero).
.TP
.I tzh_charcnt
The number of characters of time zone abbreviation strings
stored in the file.
.PP
The above header is followed by
.I tzh_timecnt
four-byte signed integer values sorted in ascending order.
These values are written in standard byte order.
Each is used as a transition time (as returned by
.IR time (2))
at which the rules for computing local time change.
Next come
.I tzh_timecnt
one-byte unsigned integer values;
each one tells which of the different types of local time types
described in the file is associated with the same-indexed transition time.
These values serve as indices into an array of
.I ttinfo
structures (with
.I tzh_typecnt
entries) that appears next in the file;
these structures are defined as follows:
.in +.5i
.sp
.nf
.in +.5i
.ta .5i +\w'struct dsinfo  'u
struct dsinfo {
	long	ds_gmtoff;
	char	ds_abbr[TZ_ABBR_LEN+1];
	char	ds_isdst;
};

struct tzinfo {
	int	tz_timecnt;
	long	tz_times[TZ_MAX_TIMES];
	char	tz_types[TZ_MAX_TIMES];
	struct dsinfo	tz_dsinfo[TZ_MAX_TYPES];
};
.fi
.PP
The
.B tz_timecnt
field tells how many of the
.B tz_times
and
.B tz_types
stored in the file are meaningful.
Each of the meaningful
.B tz_times
entries is a starting time (as returned by
.IR time (2));
the same-indexed
.B tz_types
entry is the index of the
.B tz_dsinfo
array element that tells about how "local time" is generated starting at that
time.
For a file to be used by
.IR settz ,
its
.B tz_times
entries must be sorted in ascending order.
.PP
In the
.B tz_dsinfo
structures,
.B ds_gmtoff
gives the number of seconds that should be added to GMT;
.B ds_abbr
is the ASCII-NUL-terminated string used as the time zone abbreviation;
and
.B
ds_isdst
tells whether
.B
tm_isdst
should be set by
.IR newlocaltime (3).
.PP
.I Newlocaltime
uses the first element of
.B tz_dsinfo
if either
.I tzh_timecnt
is zero or the time argument is less than the first transition time recorded
in the file.
.PP
For version-2-format time zone files,
the above header and data are followed by a second header and data,
identical in format except that
eight bytes are used for each transition time or leap second time.
After the second header and data comes a newline-enclosed,
POSIX-TZ-environment-variable-style string for use in handling instants
after the last transition time stored in the file
(with nothing between the newlines if there is no POSIX representation for
such instants).
This string may use a minor extension to the POSIX TZ format: the
hours part of its transition times may be signed and range from
\(mi167 through 167 instead of the POSIX-required unsigned values
from 0 through 24.
.SH SEE ALSO
newctime(3), newtzset(3)
.\" This file is in the public domain, so clarified as of
.\" 1996-06-05 by Arthur David Olson.
